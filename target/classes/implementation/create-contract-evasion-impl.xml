<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:s4hana="http://www.mulesoft.org/schema/mule/s4hana"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/s4hana http://www.mulesoft.org/schema/mule/s4hana/current/mule-s4hana.xsd">
	
	<flow name="create-contract-evasion-implFlow" doc:id="cb98a60a-a89a-44a3-917e-cc3dcfca6d84" >
		<ee:transform doc:name="Create Contract Evasion - Request Transformation" doc:id="116b8ece-7ff2-46dd-b088-87ecabd6c4da" >
			<ee:message >
				<ee:set-payload resource="dataweave/create-contract-evasion-request-transformation.dwl" />
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="4d6e16d0-51ce-499a-89fd-8454e694f75a" message='#[%dw 2.0&#10;output text/plain&#10;---&#10;"Creating Contract Evasion using payload: " ++ write(payload, "application/json")]' />
		<s4hana:create-entity doc:name="Create Contract Evasion" doc:id="7721c52b-d887-4ed6-bef4-8863fe3d15da" responseTimeout="${sap.connection.response-timeout}" responseTimeoutUnit="SECONDS" config-ref="SAP_S_4HANA_Config" service="ZERP_ISU_CONTRACT_EVASIONE_SRV" entityType="ContractEvaSet">
		    <reconnect frequency="${sap.connection.reconnection.frequency}" count="${sap.connection.reconnection.attempts}"/>
			<s4hana:entity ><![CDATA[#[%dw 2.0
output application/java
---
payload]]]></s4hana:entity>
		</s4hana:create-entity>
		<choice doc:name="Choice" doc:id="0c11d7ca-730e-4dce-a756-947b7acd07ee" >
			<when expression='#[payload.Esito == "OK"]'>
				<ee:transform doc:name="Create Contract Evasion - Response Transformation" doc:id="e7f4d73a-ed22-4bb4-94f8-b281126b16a7">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
---
{
	"ordinary" : {
		"ALIA_ABRSPERR__c" : payload.Abrsperr,
		("ALIA_EINZDAT__c" : payload.DataInizioOrdinario as Date {format: "yyyy-MM-dd"} as String {format: "yyyyMMdd"}) if ((!isEmpty(payload.DataInizioOrdinario)) and (payload.DataInizioOrdinario as String != "9999-12-31")),
		("ALIA_AUSZDAT__c" : payload.DataFineOrdinario as Date {format: "yyyy-MM-dd"} as String {format: "yyyyMMdd"}) if ((!isEmpty(payload.DataFineOrdinario)) and (payload.DataFineOrdinario as String != "9999-12-31")),
		"Messaggio" : payload.Messaggio,
		"Esito" : payload.Esito,
		"ALIA_OLDKEY__c" : payload.ContrattoOrdinario,
		"ALIA_VREFER__c" : payload.VreferOrdinario,
		"ALIA_ZZCODRAGG__c" : payload.Zzcodragg,
		"ALIA_OLDKEY_Instl__c" : payload.Anlage,
		("ALIA_AB__c" : payload.AbOrdinario as Date {format: "yyyy-MM-dd"} as String {format: "yyyyMMdd"}) if (!isEmpty(payload.AbOrdinario)),
		"ALIA_ABLEINH__c": payload.Ableinh,
		("ALIA_MotivoAttivazione__c" : payload.Zzmotatt)if (!isEmpty(payload.Zzmotatt))
	},
	"evasion" : {
		("ALIA_EINZDAT__c" : payload.DataInizioEvasione as Date {format: "yyyy-MM-dd"} as String {format: "yyyyMMdd"}) if ((!isEmpty(payload.DataInizioEvasione)) and (payload.DataInizioEvasione as String != "9999-12-31")),
		("ALIA_AUSZDAT__c" : payload.DataFineEvasione as Date {format: "yyyy-MM-dd"} as String {format: "yyyyMMdd"}) if ((!isEmpty(payload.DataFineEvasione)) and (payload.DataFineEvasione as String != "9999-12-31")),
		("ALIA_REQUESTDATE__c" : payload.DataPresentazione as Date {format: "yyyy-MM-dd"} as String {format: "yyyyMMdd"}) if ((!isEmpty(payload.DataPresentazione)) and (payload.DataPresentazione as String != "9999-12-31")),
		"ALIA_OLDKEY__c" : payload.ContrattoEvasione,
		"ALIA_VREFER__c" : payload.VreferEvasione,
		("ALIA_AB__c" : payload.AbEvasione as Date {format: "yyyy-MM-dd"} as String {format: "yyyyMMdd"}) if (!isEmpty(payload.AbEvasione)),
		"ALIA_ABLEINH__c": payload.Ableinh,
		"CheckSanzione": payload.CheckSanzione,
		("ALIA_MotivoAttivazione__c" : payload.Zzmotatt)if (!isEmpty(payload.Zzmotatt))
	}
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="bc96f0c4-fbb8-4a9e-8c22-1cef65cc4b76" message="Contract evasion successfully created - #[payload]" />
			</when>
			<otherwise >
				<set-variable value='#[payload.Esito ++ " " ++ payload.Messaggio]' doc:name="Error message" doc:id="a76e73b2-3b27-4e70-a7e7-55af2d34cf33" variableName="errorMessage"/>
				<logger level="ERROR" doc:name="Logger" doc:id="06ae069d-93fd-4074-9755-d11ebb0d7f43" message="Error creation evasion contract - #[vars.errorMessage]" />
				<raise-error doc:name="Error creationg evasion contract on SAP" doc:id="4e563c16-d41a-4cbc-b198-502bfba2a467" type="S4HANA:ERROR_CREATING_EVASION_CONTRACT" description="#[vars.errorMessage]"/>
			</otherwise>
		</choice>
		<error-handler >
			<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="179a62ea-00f7-4143-abb7-9fc1ad910f42" type="S4HANA:INVALID_ENTITY" when='error.description contains "Configurazione evasione non trovata"'>
				<logger level="WARN" doc:name="Logger" doc:id="d14c5e84-d5b1-4c61-b9f0-2a42052f9a2d" message="Operands not found"/>
				<set-payload value="#[%dw 2.0&#10;output application/json&#10;---&#10;{}]" doc:name="No contract" doc:id="06660d47-b8d5-4307-832d-d72e12bd2321" />
			</on-error-continue>
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="706f77fc-779d-46dd-bd52-106b5c30ad1a" >
				<logger level="ERROR" doc:name="Logger" doc:id="3d101ca0-1c12-44c0-a053-04429e0e363c" message="Error creating Contract Evasion"/>
				<ee:transform doc:name="Error Transform Message" doc:id="7b6c34ba-96dc-454c-bcb3-f11a71b3a5c0" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json skipNullOn="everywhere"
---
{
	"error": {
		"message": error.errorMessage,
		"description": error.description,
		"detailedDescription": error.detailedDescription,
		"errorType": {
			"identifier": error.errorType.identifier,
			"namespace": error.errorType.namespace	
		}
	}
}
]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>	
</mule>
