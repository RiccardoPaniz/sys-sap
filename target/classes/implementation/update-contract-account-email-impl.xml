<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:s4hana="http://www.mulesoft.org/schema/mule/s4hana"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/s4hana http://www.mulesoft.org/schema/mule/s4hana/current/mule-s4hana.xsd">
	<flow name="update-contract-account-email-implFlow" doc:id="52bde5eb-bcf0-4a8c-a229-8836c5f12bfd" >
		<logger level="INFO" doc:name="Logger" doc:id="3aa6a44b-40b7-4f5b-9eb1-682a8ec00a04" message="Updating Contract Account"/>
		<set-variable value="#[payload.contractAccount]" doc:name="Contract Account" doc:id="570b47f6-34c4-4ba7-ba84-eb57e9af0626" variableName="contractAccount"/>
		<set-variable value="#[payload.account.ALIA_OLDKEY__c]" doc:name="accountId" doc:id="4c35d9b8-b862-4b28-a7fd-089e16b5d9c6" variableName="accountId"/>
		<set-variable doc:name="Account Address" doc:id="c205a438-4c50-4d5b-b938-6b765aa08be3" variableName="accountAddress" value='#[%dw 2.0&#10;output application/json&#10;---&#10;null]'/>
		<choice doc:name="Choice" doc:id="be5b9488-069a-4ed7-9613-58f8964ebfa0" >
			<when expression='#[vars.contractAccount.ALIA_ICOM_SMTP_VERSTATUS_1__c == "verification_ok" or vars.contractAccount.ALIA_ICOM_SMTP_VERSTATUS_1__c == "verification_not_sync"]'>
				<flow-ref doc:name="upsert-account-email-address-implFlow" doc:id="6556b128-d229-4ead-943a-bef6ce94c9b0" name="upsert-account-email-address-implFlow" />
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="2c8d413e-7cbc-469e-9bdf-4a1dd3d97664" message="Aggiornamento email non eseguito per mancanza di verifica nuovo indirizzo email"/>
			</otherwise>
		</choice>
		<choice doc:name="Choice" doc:id="6a034d6b-7634-4857-9dd1-62008a67b781" >
			<when expression='#[(vars.contractAccount.ALIA_ICOM_SMTP_VERSTATUS_1__c != "verification_ok" and vars.contractAccount.ALIA_ICOM_SMTP_VERSTATUS_1__c != "verification_not_sync" ) and !isEmpty(vars.contractAccount.ALIA_ICOM_SMTP_ADDR_1__c)]'>
				<flow-ref doc:name="get-contract-account-impl" doc:id="1edf3106-6a1a-4e5d-8365-5c0ed0028675" target="backupCA" name="get-contract-account-implFlow"/>
			</when>
		</choice>
		<ee:transform doc:name="Update Contract Account - RequestTransformation" doc:id="1bd70eb4-2960-44df-81af-e169a7515870" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/json skipNullOn="everywhere"
---
{
  "ContractAccountID" : vars.contractAccount.ALIA_OLDKEY__c,
  ("AccountID" : vars.accountId),
  ("Description" : vars.contractAccount.ALIA_VKBEZ__c) if (!isEmpty(vars.contractAccount.ALIA_VKBEZ__c)),
  ("Opbuk" : vars.contractAccount.ALIA_OPBUK__c) if (!isEmpty(vars.contractAccount.ALIA_OPBUK__c)),
  "OutgoingPaymentMethodID1" : if (isEmpty(vars.contractAccount.ALIA_AZAWE__c)) "" else vars.contractAccount.ALIA_AZAWE__c,
  ("Mahnv" : vars.contractAccount.ALIA_MAHNV__c) if (!isEmpty(vars.contractAccount.ALIA_MAHNV__c)),
  ("BillToAccountID" : vars.contractAccount.BillToAccountID) if (!isEmpty(vars.contractAccount.BillToAccountID)),
  "BillToAccountAddressID" : if (isEmpty(vars.accountAddress.AddressID)) vars.contractAccount.ALIA_SHIPPING_ADDRESS_ID__c else vars.accountAddress.AddressID,
  ("AuthorizationGroup" : vars.contractAccount.ALIA_BEGRU__c) if (!isEmpty(vars.contractAccount.ALIA_BEGRU__c)),
  (Zahlkond : vars.contractAccount.ALIA_ZAHLKOND__c) if (!isEmpty(vars.contractAccount.ALIA_ZAHLKOND__c)),
  ("Vertyp" : vars.contractAccount.ALIA_VERTYP__c) if (!isEmpty(vars.contractAccount.ALIA_VERTYP__c)),
  ("AccountDeterminationFeature" : vars.contractAccount.ALIA_KOFIZ_SD__c) if (!isEmpty(vars.contractAccount.ALIA_KOFIZ_SD__c)),
  ("AccountClass" : vars.contractAccount.ALIA_KTOKL__c) if (!isEmpty(vars.contractAccount.ALIA_KTOKL__c)),
  ("BusinessLocation" : vars.contractAccount.ALIA_BUPLA__c) if (!isEmpty(vars.contractAccount.ALIA_BUPLA__c)),
  "SendcontrolGp": 
    if (vars.backupCA != null) vars.backupCA.SendcontrolGp
    else if (vars.contractAccount.Send_via_Email__c == true and (vars.contractAccount.ALIA_ICOM_SMTP_VERSTATUS_1__c == "verification_ok" or vars.contractAccount.ALIA_ICOM_SMTP_VERSTATUS_1__c == "verification_not_sync"))
      (if (vars.contractAccount.ALIA_ICOM_SMTP_REMARK_1__c == "PEC") "0002" else "0003")
    else "0001",
  ("AccountAddressID" :
  	if (vars.contractAccount.ALIA_SHIPPING_ADDRESS_ID__c == null) vars.accountAddress.AddressID else vars.contractAccount.ALIA_SHIPPING_ADDRESS_ID__c)
  	if (!isEmpty(vars.accountAddress.AddressID) or !isEmpty(vars.contractAccount.ALIA_SHIPPING_ADDRESS_ID__c)),
    ("InterestKey" : vars.contractAccount.ALIA_INTEREST_KEY__c) if (!isEmpty(vars.contractAccount.ALIA_INTEREST_KEY__c)),
  ("NomeIntIban": vars.contractAccount.ALIA_NomeIntestatarioIban__c) if (!isEmpty(vars.contractAccount.ALIA_NomeIntestatarioIban__c)),
  ("CognomeIntIban": vars.contractAccount.ALIA_CognomeIntestatarioIban__c) if (!isEmpty(vars.contractAccount.ALIA_CognomeIntestatarioIban__c)),
  ("CfIntIban": vars.contractAccount.ALIA_CodiceFiscaleIntestatarioIban__c) if (!isEmpty(vars.contractAccount.ALIA_CodiceFiscaleIntestatarioIban__c)),
  ("RsocIbanName": vars.contractAccount.ALIA_RagioneSocialeIntestatarioIban__c) if (!isEmpty(vars.contractAccount.ALIA_RagioneSocialeIntestatarioIban__c)),
  ("TaxNumIban": if (substring(vars.contractAccount.ALIA_PartIvaIntestIban__c, 0, 2) == "IT")
  	                substringAfter(vars.contractAccount.ALIA_PartIvaIntestIban__c, "IT")
                 else
                    vars.contractAccount.ALIA_PartIvaIntestIban__c) if (!isEmpty(vars.contractAccount.ALIA_PartIvaIntestIban__c)),
  ("EredeIban": if (vars.contractAccount.ALIA_Erede__c==true)
  					"Si"
  				else
  				 	"No"  	
  ) if (!isEmpty(vars.contractAccount.ALIA_Erede__c))
   
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="2104ac15-ccc5-4b02-ba24-8891c7009cc2" message='#[%dw 2.0&#10;output text/plain&#10;---&#10;"Updating Contract Account using payload: " ++ write(payload, "application/json")]' />
		<try doc:name="Try" doc:id="9ec1d37e-14d1-4f94-9cb3-3543eb2a7d69" >
			<s4hana:update-entity doc:name="Update Contract Account" doc:id="24e70fcd-43df-4ca9-81a3-5ebc7cf6992b" responseTimeout="${sap.connection.response-timeout}" responseTimeoutUnit="SECONDS" config-ref="SAP_S_4HANA_Config" service="ZERP_ISU_UMC_SRV" entityType="ContractAccounts">
			<reconnect frequency="${sap.connection.reconnection.frequency}" count="${sap.connection.reconnection.attempts}" />
		</s4hana:update-entity>
			<error-handler >
				<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="0eeb7467-a025-47e4-84bc-755b99bdf6b4" when='error.description contains "INT_MULE_ISU"'>
					<flow-ref doc:name="manage-errorFlow and SV originalError" doc:id="e3042f57-e748-4051-b0ee-b28d12b452f2" name="manage-errorFlow" target="originalError"/>
					<until-successful maxRetries="2" doc:name="Until Successful" doc:id="944a74db-8ec0-4d76-8aeb-d913a191fcfc" millisBetweenRetries="5000">
					<s4hana:update-entity doc:name="Update Contract Account" doc:id="bdb7279e-b02d-4152-85de-92408dba4966" responseTimeout="${sap.connection.response-timeout}" responseTimeoutUnit="SECONDS" config-ref="SAP_S_4HANA_Config" service="ZERP_ISU_UMC_SRV" entityType="ContractAccounts">
			<reconnect frequency="${sap.connection.reconnection.frequency}" count="${sap.connection.reconnection.attempts}" />
		</s4hana:update-entity>
					</until-successful>
					<remove-variable doc:name="Remove Variable" doc:id="1da60c17-f1d2-4665-b471-4b4db3016507" variableName="originalError"/>
				</on-error-continue>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="6a34733c-86ea-42d4-8ceb-3d03026a174b" message="Response SAP Updating Contract Account: #[payload]"/>
		<ee:transform doc:name="Update Contract Account - Response Transformation" doc:id="a6affb26-ad55-495e-8daf-b206be33c882" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json skipNullOn="everywhere"
---
{
	"ALIA_ContractAccountAddressId__c" : payload.AccountAddressID,
	"ALIA_OLDKEY__c" : payload.ContractAccountID,
	"ALIA_OPBUK__c" : payload.Opbuk,
	"ALIA_EZAWE__c" : payload.IncomingPaymentMethodID,
	"ALIA_AZAWE__c" : payload.OutgoingPaymentMethodID1,
	"ALIA_MAHNV__c" : payload.Mahnv,
	"ALIA_ZAHLKOND__c" : payload.Zahlkond,
	"ALIA_VERTYP__c" : payload.Vertyp,
	"ALIA_KOFIZ_SD__c" : payload.AccountDeterminationFeature,
	"ALIA_BUPLA__c" : payload.BusinessLocation,
	"ALIA_BKVID__c" : vars.bankAccount.BankAccountID,
	"ALIA_SHIPPING_ADDRESS_ID__c" : vars.accountAddress.AddressID
}
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="494959bb-6193-4ff5-9f6b-996e0d2dd610" message='#[%dw 2.0&#10;output text/plain&#10;---&#10;"Contract Account successfully updated - " ++ write(payload, "application/json")]' />
		<error-handler >
			<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="f9382c47-a103-465c-99a8-15c8cc526e0c" >
				<logger level="ERROR" doc:name="Logger" doc:id="d1b12b8b-dd4b-40bd-93e9-7f04fcb11c68" message="Error updating Contract Account"/>
				<ee:transform doc:name="Error Transform Message" doc:id="83272bc6-8dcc-4ff6-aedb-512572596fb7" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json skipNullOn="everywhere"
---
{
	"error": {
		"message": error.errorMessage,
		"description": error.description,
		"detailedDescription": error.detailedDescription,
		"errorType": {
			"identifier": error.errorType.identifier,
			"namespace": error.errorType.namespace	
		}
	}
}

]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</on-error-propagate>
		</error-handler>
	</flow>
</mule>
