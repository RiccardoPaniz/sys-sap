<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
	<flow name="manage-errorFlow" doc:id="8b001e4c-9476-4dd7-a4bc-e8db6acbacf0" >
		<choice doc:name="Choice" doc:id="d18849f9-f464-4b48-b0db-55dca2c3e506" >
			<when expression="#[!isEmpty(vars.originalError)]">
				<set-payload value="#[vars.originalError]" doc:name="Set Payload" doc:id="3cc9f9d5-3d7f-4d2e-9b72-e16c0aa122b8" />
			</when>
			<otherwise >
				<ee:transform doc:name="Error Message" doc:id="1799ca67-ea06-4aed-9d85-be49ab6fef35">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
import * from dw::core::Strings
output application/json skipNullOn="everywhere"

fun parseError(errorToParse: String) = if (startsWith(errorToParse, "{")) read(errorToParse, "application/json") else {
    "error": {
        "code": substringBefore(errorToParse, " "),
        "message" : {
            "value": substringAfter(errorToParse, " ")
        }
    }
}

var errorDescription = parseError(error.detailedDescription)

---

{
	"error": {
		"errType" : error.errorType.namespace ++ ":" ++ error.errorType.identifier,
        "errDesc": errorDescription,
		"code" : errorDescription.error.code,
		"message" : errorDescription.error.message.value
	}
}
]]></ee:set-payload>
			</ee:message>
			<ee:variables>
			</ee:variables>
		</ee:transform>
				<logger level="ERROR" doc:name="Logger" doc:id="7a92ca4b-d93d-44eb-b17b-c96698905e33" message='#[%dw 2.0&#10;output text/plain&#10;---&#10;"Error message set: " ++ write(payload, "application/json")]' />
			</otherwise>
		</choice>
	</flow>
</mule>
